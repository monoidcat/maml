{# This is an example of multi-line comment.
   Note: There are no single-line comments! #}

@Test.Example

{###################################################
 ################# Introduction ####################
 ###################################################}

{# Here k belongs to a singleton set, i.e. it says that k is a member of a set
  that has 10 as its only member.

  Note:
  This is a constraint on the set of all integers (i.e. a subset), not a
  value assignment! Hence why it's singleton.
#}
k : Int{= 10}

{# A variable of product type (or equivalently, member of cartesian product) #}
prod : Int * Real

{# Example of increment function #}
inc : (x : Int) -> (y : Int{= x + 1})

{# Example of named products to do "funky" stuff like so: #}
named_prod : (experience : Int) * (salary : Real{= 10 * experience / 2})

{# Note: the above example is isomorphic to its dual - the exponential type
  (a.k.a. function)
#}
exp_prod : (experience : Int) -> (salary : Real{= 10 * experience / 2})

{# Assignment of even numbers to each natural number #}
even_n : (n : Int{>= 0}) -> Int{= 2 * n}

{# Every functions dual is a table #}
even_n_prod : (n : Int{>= 0}) * Int{= 2 * n}

{# Even Set #}
even : Int{= 2 * _x }

{# Set comprehension

{# Elements of `Set` are other sets #}
{# We avoid Set in Set paradox by cumulative Set #}

{## So  #}

type A : Set{}

A := {x : Int. 2 * x | x >= 0 }
Unit := {}
unit := ()
#}
{# TODO: Handle intersections #}


{#################################################}
{############ Basic Machine Learning #############}
{#################################################}

{# There are three major components of an ML system:
  - Data
  - Model
  - Inference:
    - Training algorithm
    - Predicition algorithm

  We will discuss each one of them as we go.
#}

{# Inductive data types with (SMT) constraints.

  These shall provide us with the data model.
  Not to confuse with the data or model as stated above!

  A data model here means schema of data with the addition of constraints. Such
  constraints are necessary to establish consistency in data and establish
  business rules (a.k.a. domain knowledge). At the end of the day, it is the
  model of data, but we will get back to this at later point. For now, just
  think of it as schema.

  Questions:
    - How these relate to HITs?
    - Can we use them as (weak?) homotopy types?
#}

{# Numerical data should be carefully considered for units, scaling, and
  constraints #}


data HR : {
  genderID  : Int
  degree    : Nat
  latitude  : Real
  longitude : Real
  age       : Nat
  salary    : Real
}


{# Note that `HR` represents a 6-dimensional vector #}
